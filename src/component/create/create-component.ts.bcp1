import { createTypedSourcesMap } from '../misc/typed-sources-map/implementations/create-typed-sources-map';
import { ITypedSourcesMap } from '../misc/typed-sources-map/implementations/typed-sources-map';
import {
  ITypedSourcesMapEntriesTupleToKeysTuple,
} from '../misc/typed-sources-map/types/typed-sources-map-entries-tuple-to-keys-tuple.infer';
import { ITypedSourcesMapEntriesTuple } from '../misc/typed-sources-map/types/typed-sources-map-entries-tuple.type';
import {
  IVirtualCustomElementNodeSlotsMap,
} from '../virtual-node/dom/nodes/reactive/custom-element/slots/virtual-custom-element-node-slots-map.type';
import {
  IVirtualCustomElementNodeOptions,
  VirtualCustomElementNode,
} from '../virtual-node/dom/nodes/reactive/custom-element/virtual-custom-element-node.class';
import { IVirtualDOMNodeTemplate } from '../virtual-node/dom/types/virtual-dom-node-template.type';
import { VirtualDOMNode } from '../virtual-node/dom/virtual-dom-node.class';


/*-------------------*/

export type IComponentCreateFunctionReturn<// generics
  GElement extends HTMLElement,
  GTypedSourcesTuple extends ITypedSourcesMapEntriesTuple,
//
  > =
  // VirtualCustomElementNode<GElement, GTypedSourcesTuple>
  VirtualDOMNode
  ;

export interface IComponentCreateFunction<// generics
  GElement extends HTMLElement,
  GTypedSourcesTuple extends ITypedSourcesMapEntriesTuple,
//
  > {
  (
    slots?: IVirtualCustomElementNodeSlotsMap,
  ): IComponentCreateFunctionReturn<GElement, GTypedSourcesTuple>;
}

export type IComponent<// generics
  GElement extends HTMLElement,
  GTypedSourcesTuple extends ITypedSourcesMapEntriesTuple,
//
  > = {
  readonly name: string;
  readonly create: IComponentCreateFunction<GElement, GTypedSourcesTuple>;
};

// export type IGenericComponent = IComponent<HTMLElement, ITypedSourcesMapEntriesTuple>;
export type IGenericComponent = IComponent<any, ITypedSourcesMapEntriesTuple>;


/*-------------------*/


// export interface ICreateComponentOptionsInitFunctionReturn<GData> {
//   $: GData;
//   inputs: GData;
// }

export interface ICreateComponentOptionsInitFunctionOptions<// generics
  GElement extends HTMLElement,
  GTypedSourcesTuple extends ITypedSourcesMapEntriesTuple,
  //
  > {
  node: VirtualCustomElementNode<GElement, GTypedSourcesTuple>;
  slots: IVirtualCustomElementNodeSlotsMap;
  sources: ITypedSourcesMap<GTypedSourcesTuple>;
}

export interface ICreateComponentOptionsInitFunction<// generics
  GElement extends HTMLElement,
  GTypedSourcesTuple extends ITypedSourcesMapEntriesTuple,
  GData extends object
  //
  > {
  (
    options: ICreateComponentOptionsInitFunctionOptions<GElement, GTypedSourcesTuple>,
  ): GData;
}

export type ICreateComponentTemplateArguments<GData extends object> = [
  $: GData,
  slots: IVirtualCustomElementNodeSlotsMap,
];
export type ICreateComponentTemplate<GData extends object> = IVirtualDOMNodeTemplate<ICreateComponentTemplateArguments<GData>>;

export interface ICreateComponentOptions<// generics
  GElement extends HTMLElement,
  GTypedSourcesTuple extends ITypedSourcesMapEntriesTuple,
  GData extends object
  //
  > extends Pick<IVirtualCustomElementNodeOptions<GTypedSourcesTuple>, 'name' | 'extends'> {
  // html: string;
  // childComponents: readonly IGenericComponent[];
  // styles: string[];
  sources: ITypedSourcesMapEntriesTupleToKeysTuple<GTypedSourcesTuple>;
  init: ICreateComponentOptionsInitFunction<GElement, GTypedSourcesTuple, GData>;
  template?: ICreateComponentTemplate<GData>;
  styles?: readonly string[];
}


export function createComponent<// generics
  GElement extends HTMLElement,
  GTypedSourcesTuple extends ITypedSourcesMapEntriesTuple,
  GData extends object
  //
  >(
  {
    name,
    extends: _extends,
    sources: sourceNames,
    init,
    template,
    styles = [],
  }: ICreateComponentOptions<GElement, GTypedSourcesTuple, GData>,
): IComponent<GElement, GTypedSourcesTuple> {

  const create: IComponentCreateFunction<GElement, GTypedSourcesTuple> = (
    slots: IVirtualCustomElementNodeSlotsMap = new Map(),
  ): IComponentCreateFunctionReturn<GElement, GTypedSourcesTuple> => {

    const sources = createTypedSourcesMap<GTypedSourcesTuple>(sourceNames);

    const node = new VirtualCustomElementNode<GElement, GTypedSourcesTuple>({
      name,
      extends: _extends,
      slots,
      sources,
    });

    const $: GData = init({
      node,
      slots,
      sources,
    });

    if (template !== void 0) {
      template(node, $, slots);
    }

    // styles.forEach((style: string) => {
    //   document.body.cre
    // });

    return node;
  };

  return {
    name,
    create,
  };
}
